{
  "hash": "cf0ef88c70e415c41e3091a8114910ae",
  "result": {
    "markdown": "---\ntitle: \"R Basics\"\nauthor: \"Jonas, Pietro & Hauke\"\nformat: \n  revealjs:\n    theme: [simple, custom.scss]\n    logo: img/logo.png\n    footer: \"[Institute of Behavioral Science and Technology](https://www.ibt.unisg.ch/)\"\n    preview-links: true\n---\n\n# Welcome to Session 2\n\n\n\n\n\n\n## Recap Session 1\n- Setting up R\n- Get to know the UI\n- Objects, classes, operations\n- Read in data\n- Hauke: what else?\n\n## Any experienced difficulties? Anything we should repeat?\n\n\n## Overview Session 2\n1. Packages to the rescue\n2. Read in and export,\n3. Explore,\n4. Manipulate, and \n5. Analyze data \n\n## Packages in R {.smaller}\nBeyond `base` R's core functions, packages provide additional functionality for (almost) [all of your problems](https://support.rstudio.com/hc/en-us/articles/201057987-Quick-list-of-useful-R-packages).\n\n\nSome of the most widely-used packages are included in the [`tidyverse`](https://www.tidyverse.org/packages/#core-tidyverse) collection\n`install.packages(\"tidyverse\")` and `library(tidyverse)` brings you most of the functions you will need (at this point):\n\nFor example:\n\n- manipulate data: `dplyr`\n- tidy data: `tidyr`\n- visualize data: `ggplot2`\n\nThere are many more packages [available](https://support.rstudio.com/hc/en-us/articles/201057987-Quick-list-of-useful-R-packages)\n\n::: aside\nInfo on any package can be found in its CRAN documentation.\n:::\n\n## Practical Advice {.smaller}\n::: callout-note\n## Pitfall\nFailing to load a package is a common `error` source - one you can easily avoid by loading everything you need right at the start.\n:::\n\nThis is how the very beginning of your code could look like:\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"ggplot2\") # only needed for installing once\n#install.packages(\"tidyverse\") # only needed for installing once\nlibrary(ggplot2) # load package\nlibrary(tidyverse) # load package\n```\n:::\n\n::: aside\nYou might also directly specify a package (without loading it globally) by using the following syntax: `ggplot2::ggplot()`\n:::\n\n## Recap: Opening our code we need to have some things in place\nSet your working directory, load your packages:\n\n::: {.cell}\n\n```{.r .cell-code}\n# setwd(\"/Users/haukeroggenkamp/Documents/coursework/r-basics\") #set your working directory\n#install.packages(\"ggplot2\") # only needed for installing once\n#install.packages(\"tidyverse\") # only needed for installing once\nlibrary(ggplot2) # load package\nlibrary(tidyverse) # load package\n```\n:::\n\n\n## What's next: We need some data to work with!\nWe will learn to:\n\n- read in and store, \n- explore,\n- manipulate,\n- analyze and \n- visualize data. <br/>\n\n\n## Reading in and storing data {.smaller}\nData can come in various file formats, e.g., `.csv`, `.xlsx`, `.sav` etc. We can read all these files into our `environment`. \n\nFor that, we always specify the location path to the local data source (and we directly assign our data to an object called `data`)\n\n:::{.columns}\n::: {.column width=\"50%\"}\nReading in\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.table(\"/Users/haukeroggenkamp/Documents/coursework/r-basics/student_experiment.csv\", sep = \";\", header = T) # you need to adapt this to your working directory file path\n```\n:::\n\n::: \n\n::: {.column width=\"50%\"}\nSaving\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.table(data, \"/Users/haukeroggenkamp/Documents/coursework/r-basics/student_experiment_processed.csv\") # writes the final dataframe as a .csv file into your specified directory\n```\n:::\n\n:::\n:::\n\n::: callout-note\n## Good to know\nWe recommend text files (`.csv` or `.txt`), however, there are packages for reading in other file formats (`haven`, `foreign` or `rio`).\n:::\n\n## Exploring data I/II {.smaller}\nYou should know how your data is structured before processing it and R has some neat functions to do that:\n\n- `head(data)` shows the first few rows of your data\n- `names(data)` shows the column or variable names of your data\n- `view(data)` shows the entire data in a new window\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(data)\nnames(data)\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  lfdn external_lfdn tester dispcode lastpage\n1    2             0      0       31  6061029\n2    4             0      0       31  6061029\n3   11             0      0       31  6061029\n4   13             0      0       31  6061029\n5   14             0      0       31  6061029\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"lfdn\"          \"external_lfdn\" \"tester\"        \"dispcode\"     \n [5] \"lastpage\"      \"quality\"       \"duration\"      \"expectation\"  \n [9] \"r_experience\"  \"interest_data\"\n```\n:::\n:::\n\n\n\n\n## Exploring data II/II {.smaller}\nTo get a feeling for your data, you can investigate summary statistics:\n\n::: {.columns}\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(data$rent) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  400.0   532.5   640.0   814.8   712.5  3000.0       1 \n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nrstatix::get_summary_stats(data, rent, type=\"five_number\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 7\n  variable     n   min   max    q1 median    q3\n  <chr>    <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl>\n1 rent        12   400  3000  532.    640  712.\n```\n:::\n:::\n\n:::\n:::\n\nWe can calculate the mean rent of this course individually:\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(data$rent)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\nHow about the course's gender distribution?\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(data$gender) # 1 = male, 2 = female\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n1 2 \n8 5 \n```\n:::\n:::\n\nOr the mean shoe size by gender?\n\n::: {.cell}\n\n```{.r .cell-code}\nstats::aggregate(shoesize ~ gender, data, FUN = mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  gender shoesize\n1      1   43.125\n2      2   37.800\n```\n:::\n:::\n\n\n## Manipulate your data {.smaller}\nSome important functions from `dplyr`:\n\n- `select` Choose which columns to include.\n- `filter` Filter which rows to include.\n- `arrange` Sort the data, by size for continuous variables, by date, or alphabetically.\n- `group_by` Group the data by a categorical variable.\n- `n()` Count the number of records. Here there isn’t a variable in the brackets of the function, because the number of records applies to all variables.\n- `mutate` Create new column(s) in the data, or change existing column(s).\n- `rename` Rename column(s).\n- `bind_rows` Append one data data frame to another, combining data from columns with the same name.\n\n## Manipulate: `select` and `filter`{.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n  select(gender, rent) # show just the specified columns\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  gender rent\n1      2   NA\n2      2 3000\n3      1  950\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  filter(gender==1 & shoesize ==44) %>% select(gender, shoesize) # show just males with a shoesize of 44\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  gender shoesize\n1      1       44\n2      1       44\n3      1       44\n```\n:::\n:::\n\n::: callout-note\n## About the `%>%`(pipe) operator\n`%>%` makes code easier to write and read. It works similar to a + sign and is an integral part of the tidyverse syntax\n:::\n\n\n## Manipulate: `arrange` and `n`{.smaller}\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n     filter(gender == 1 & rent <= 900) %>% # only males with rent below 900CHF\n     arrange(desc(rent)) %>% # sort by descending rent \n        select(gender, rent) # show only the columns gender and rent\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  gender rent\n1      1  750\n2      1  650\n3      1  650\n4      1  630\n5      1  480\n6      1  420\n7      1  400\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  filter(gender == 2) %>% # only female\n  summarise(\n    n = n()) # number of instances written in new column with name n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  n\n1 5\n```\n:::\n:::\n\n\n::: callout-note\n## `summarise()`\n`summarise()` reduces multiple values down to a single summary.\n:::\n\n## Manipulate: `group_by`{.smaller}\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%\n  group_by(gender) %>% # group by gender\n  summarise(\n    n = n(), # counte the instances and write in column named n\n    avg_height = mean(height, na.rm = TRUE),\n    avg_rent = mean (rent, na.rm = TRUE)) # calculate the mean height and write in avg_height column\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  gender     n avg_height avg_rent\n   <int> <int>      <dbl>    <dbl>\n1      1     8       182.     616.\n2      2     5       158.    1212 \n```\n:::\n:::\n\n\n::: callout-note\n## Removing `NAs`\n`na.rm` allows you to exclude instances of missing value. This helps to prevent `error` messages. But check why is that data missing!\n:::\n\n## Manipulate: `mutate` and `rename`{.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n  mutate(gender, sq_height = height ^ 2) %>% # adds variable that is a function of existing ones\n  select(gender, sq_height) # ashow only the columns gender and the new variable\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  gender sq_height\n1      2     23104\n2      2     21025\n3      1     34225\n4      1     32400\n5      1     34225\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% \n  rename(\n    cost_for_living = rent, # renames a column (new name = old name)\n    )\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n  lfdn external_lfdn tester dispcode lastpage\n1    2             0      0       31  6061029\n2    4             0      0       31  6061029\n3   11             0      0       31  6061029\n4   13             0      0       31  6061029\n5   14             0      0       31  6061029\n```\n:::\n:::\n\n\n## Put it all together{.smaller}\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>%  # Start with the data \n               filter(r_experience <= 6) %>% # Oonly those with R experience below 6\n               group_by(gender) %>%    # Group by gender\n               summarise( \n                        age.mean = mean(age),      # Define first summary...\n                        height.mean = median(height), # you get the idea...\n                        n = n()) %>% # How many are in each group?\n        select(age.mean, height.mean, n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  age.mean height.mean     n\n     <dbl>       <int> <int>\n1     22.9         185     7\n2     27.4         154     5\n```\n:::\n:::\n\n\n::: callout-note\n## Help\nIt can sometimes be hard to understand what a command is doing with the data. [Tidy data tutor](https://tidydatatutor.com/vis.html) visualizes what is happening to your data in every code step which is extremely helpful.\n:::\n\n\n## Advanced: Join two dataframes{.smaller}\n\n- `inner_join`: To keep only rows that match from the data frames, specify the argument `all=FALSE`. To keep all rows from both data frames, specify `all=TRUE`.\n- `left_join`: To include all the rows of your data frame x and only those from y that match.\n\nExample: Calculate year born of members of this class:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage_table <- read.csv(\"age_table.csv\") # read in age table from directory\ndata_new <- left_join(data, select(age_table, c(X2022_after, year_born)), by = c(\"age\" = \"X2022_after\")) # perform join to get the birthyear\ndata_new %>% select(age, year_born) %>% filter(age<24) # show the results\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  age year_born\n1  22      2000\n2  22      2000\n3  21      2001\n4  23      1999\n5  22      2000\n6  23      1999\n7  22      2000\n```\n:::\n:::\n\n\n::: aside\n[Here](https://paldhous.github.io/ucb/2018/dataviz/week7.html) is a great tutorial on applying these functions.\n:::\n\n\n## Advanced: Long to wide dataformat {.smaller}\n\n::: {.columns}\n::: {.column width=\"50%\"}\n`data_long` to `data_wide`\n\n::: {.cell}\n\n```{.r .cell-code}\nncol(data) # number of columns in long format\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n\n```{.r .cell-code}\ndata_wide <- spread(data, gender, height) # gather to wide format\nncol(data_wide) # number of columns in wide format\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\nThe arguments to spread():\n\n- data: Data object\n- key: Name of column containing the new column names\n- value: Name of column containing values\n\n::: callout-note\n## Reverse Way\nThe reverse way from wide to long format via `gather`\n:::\n:::\n:::\n\n## Analyze your data: Statistical Analysis with R {.smaller}\n\nYou (R) can do a lot:\n\n-   _t-Test_\n-   _ANOVA_\n-   _Regression_\n-   Structural Equation Models\n-   Multilevel Models\n-   Machine Learning Models\n-   Bayesian Statistics\n-   ...\n\n\n## Stats 1: t-Test {.smaller}\n\nRecap: Mean comparisons (>= 2 groups)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test(formula = rent ~ gender, data = data, alternative = 'two.sided') # base R\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWelch Two Sample t-test\n\ndata:  rent by gender\nt = -0.99236, df = 3.0711, p-value = 0.3926\nalternative hypothesis: true difference in means between group 1 and group 2 is not equal to 0\n95 percent confidence interval:\n -2481.5  1290.0\nsample estimates:\nmean in group 1 mean in group 2 \n         616.25         1212.00 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrstatix::t_test(data = data, formula = rent~gender, alternative = \"two.sided\") # the same works with other packages, here `rstatix`\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 8\n  .y.   group1 group2    n1    n2 statistic    df     p\n* <chr> <chr>  <chr>  <int> <int>     <dbl> <dbl> <dbl>\n1 rent  1      2          8     5    -0.992  3.07 0.393\n```\n:::\n:::\n\nNotice the difference in the code?\n\n::: callout-note\n## Caution\nThere are similar functions `t.test` and `t_test` from *different* packages using *different* syntax\n:::\n\n## Stats 2: Analysis of Variance {.smaller}\n\nRecap: Mean comparisons (> 2 groups)\n\nIs there a difference in XYZ?\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$course <- as.factor(data$education) # this ensures our factor to be of the right class\nsummary(aov(formula = rent~education, data = data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Df  Sum Sq Mean Sq F value Pr(>F)\neducation    1  573944  573944   1.176  0.304\nResiduals   10 4882419  488242               \n1 Beobachtung als fehlend gelöscht\n```\n:::\n:::\n\n\n::: callout-note\n## Caution\nThe underlying grouping variable needs to be `as.factor`. Always check first!\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanova(lm(formula = rent~education, data = data)) # Same analysis possible by running a linear model and wrapping the `anova` function for omnibus test\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: rent\n          Df  Sum Sq Mean Sq F value Pr(>F)\neducation  1  573944  573944  1.1755 0.3037\nResiduals 10 4882419  488242               \n```\n:::\n:::\n\n\n## Stats 3: Regression {.smaller}\n\nRecap: Relationship between two (or more) variables\n\nIs there a relationship between height and shoesize?\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(lm(formula = shoesize~height, data = data)) # runs a linear model and provides statistical summary\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = shoesize ~ height, data = data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.6840 -1.2487 -0.3436  0.9486  4.0510 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  6.96106    5.93868   1.172 0.265895    \nheight       0.19729    0.03421   5.767 0.000125 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 1.871 on 11 degrees of freedom\nMultiple R-squared:  0.7514,\tAdjusted R-squared:  0.7288 \nF-statistic: 33.26 on 1 and 11 DF,  p-value: 0.0001252\n```\n:::\n:::\n\n\n## Live-saving advice: How to get help when stuck? {.smaller}\n\n- `?lm()` will immediately provide you with Help in the panel\n- [CRAN](https://cran.r-project.org/) documentations and Cheat Sheets are a comprehensive source of support (hard to read at the beginning) \n- Google is your friend: Chance is high that someone else had a very similar question to yours on [stackoverflow.com](https://stackoverflow.com/questions/tagged/r); try different search terms and exact language\n\n:::aside\nR studio provides a long list of [cheat sheets](https://www.rstudio.com/resources/cheatsheets/)\n:::\n\n## Jump in: Time for exercising\nAdvanced exercises: Calculate the shoe soze converted in the US system\n\n- `shoesizes` dataframe\n",
    "supporting": [
      "session_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    function fireSlideChanged(previousSlide, currentSlide) {\n\n      // dispatch for htmlwidgets\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for reveal\n    if (window.Reveal) {\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\n        fireSlideChanged(event.previousSlide, event.currentSlide);\n      });\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}